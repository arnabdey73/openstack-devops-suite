############################# Server Basics #############################
# The ID of the broker. This must be set to a unique integer for each broker.
broker.id={{ kafka_broker_id }}

############################# Socket Server Settings #############################
# The address the socket server listens on. Default is PLAINTEXT://:9092
listeners=PLAINTEXT://{{ kafka_listen_address }}:{{ kafka_port }}

# Hostname and port the broker will advertise to producers and consumers.
advertised.listeners=PLAINTEXT://{{ kafka_listen_address }}:{{ kafka_port }}

# Maps listener names to security protocols, the default is for them to be the same
listener.security.protocol.map=PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL

# Default host name to publish for this broker
host.name={{ kafka_listen_address }}

# The number of threads that the server uses for receiving requests from the network and sending responses to the network
num.network.threads=3

# The number of threads that the server uses for processing requests, which may include disk I/O
num.io.threads=8

# The send buffer (SO_SNDBUF) used by the socket server
socket.send.buffer.bytes=102400

# The receive buffer (SO_RCVBUF) used by the socket server
socket.receive.buffer.bytes=102400

# The maximum size of a request that the socket server will accept (protection against OOM)
socket.request.max.bytes=104857600

############################# Log Basics #############################
# A comma separated list of directories under which to store log files
log.dirs={{ kafka_data_dir }}/logs

# The default number of log partitions per topic
num.partitions={{ kafka_num_partitions }}

# The default replication factor for automatically created topics
default.replication.factor={{ kafka_default_replication_factor }}

# The number of threads per data directory to be used for log recovery at startup
num.recovery.threads.per.data.dir=1

############################# Internal Topic Settings #############################
# The replication factor for the group metadata internal topics "__consumer_offsets" and "__transaction_state"
offsets.topic.replication.factor={{ kafka_default_replication_factor }}
transaction.state.log.replication.factor={{ kafka_default_replication_factor }}
transaction.state.log.min.isr={{ (kafka_default_replication_factor | int) // 2 + 1 }}

############################# Log Retention Policy #############################
# The minimum age of a log file to be eligible for deletion due to age
log.retention.hours={{ kafka_log_retention_hours }}

# A size-based retention policy for logs. Segments are pruned from the log unless the remaining segments drop below log.retention.bytes
# log.retention.bytes=1073741824

# The maximum size of a log segment file. When this size is reached a new log segment will be created
log.segment.bytes={{ kafka_log_segment_bytes }}

# The interval at which log segments are checked to see if they can be deleted according to the retention policies
log.retention.check.interval.ms={{ kafka_log_retention_check_interval_ms }}

############################# Zookeeper #############################
# Zookeeper connection string (see zookeeper docs for details)
zookeeper.connect={{ kafka_zookeeper_connect }}

# Timeout in ms for connecting to zookeeper
zookeeper.connection.timeout.ms=18000

# Whether to allow the automatic creation of topics
auto.create.topics.enable={{ kafka_auto_create_topics }}

# Whether to allow deleting topics
delete.topic.enable={{ kafka_delete_topic_enable }}

############################# Group Coordinator Settings #############################
# The following configurations control the internal group coordinator rebalance behavior
group.initial.rebalance.delay.ms=3000
