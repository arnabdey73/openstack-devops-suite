---
# Role tasks for Nginx Proxy
- name: Install Nginx and dependencies
  package:
    name:
      - nginx
      - python3-passlib
      - openssl
    state: present
  tags:
    - nginx
    - packages

- name: Create Nginx directories
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ nginx_user }}"
    group: "{{ nginx_group }}"
    mode: '0755'
  with_items:
    - "/etc/nginx/conf.d"
    - "/etc/nginx/ssl"
    - "/var/www/html"
    - "/var/cache/nginx"
    - "/var/log/nginx"
  tags:
    - nginx
    - configuration

- name: Configure main Nginx configuration
  template:
    src: nginx.conf.j2
    dest: /etc/nginx/nginx.conf
    owner: "{{ nginx_user }}"
    group: "{{ nginx_group }}"
    mode: '0644'
  notify: reload nginx
  tags:
    - nginx
    - configuration

- name: Remove default Nginx site
  file:
    path: "/etc/nginx/sites-enabled/default"
    state: absent
  notify: reload nginx
  ignore_errors: yes
  tags:
    - nginx
    - configuration

- name: Create dashboard directory
  file:
    path: "/var/www/html"
    state: directory
    owner: "{{ nginx_user }}"
    group: "{{ nginx_group }}"
    mode: '0755'
  tags:
    - nginx
    - dashboard

- name: Create assets directory for static files
  file:
    path: "/var/www/html/assets"
    state: directory
    owner: "{{ nginx_user }}"
    group: "{{ nginx_group }}"
    mode: '0755'
  tags:
    - nginx
    - dashboard

- name: Deploy initial service status file
  copy:
    src: initial-status.json
    dest: /var/www/html/assets/status.json
    owner: "{{ nginx_user }}"
    group: "{{ nginx_group }}"
    mode: '0644'
    force: false  # Don't overwrite if already exists
  tags:
    - nginx
    - dashboard

- name: Deploy dashboard logo
  copy:
    src: devops-suite-logo.svg
    dest: /var/www/html/assets/logo.svg
    owner: "{{ nginx_user }}"
    group: "{{ nginx_group }}"
    mode: '0644'
  tags:
    - nginx
    - dashboard

- name: Deploy dashboard CSS
  template:
    src: assets/dashboard.css.j2
    dest: /var/www/html/assets/dashboard.css
    owner: "{{ nginx_user }}"
    group: "{{ nginx_group }}"
    mode: '0644'
  notify: reload nginx
  tags:
    - nginx
    - dashboard

- name: Create docs directory for documentation
  file:
    path: "/var/www/html/docs"
    state: directory
    owner: "{{ nginx_user }}"
    group: "{{ nginx_group }}"
    mode: '0755'
  tags:
    - nginx
    - dashboard
    - documentation

- name: Copy dashboard documentation
  copy:
    src: "{{ playbook_dir }}/../docs/dashboard.md"
    dest: "/var/www/html/docs/dashboard.md"
    owner: "{{ nginx_user }}"
    group: "{{ nginx_group }}"
    mode: '0644'
  tags:
    - nginx
    - dashboard
    - documentation

- name: Deploy dashboard index page
  template:
    src: index.html.j2
    dest: /var/www/html/index.html
    owner: "{{ nginx_user }}"
    group: "{{ nginx_group }}"
    mode: '0644'
  notify: reload nginx
  tags:
    - nginx
    - dashboard

# Setup main site and other configurations
- name: Setup main Nginx proxy site
  template:
    src: site.conf.j2
    dest: /etc/nginx/conf.d/main.conf
    owner: "{{ nginx_user }}"
    group: "{{ nginx_group }}"
    mode: '0644'
  notify: reload nginx
  tags:
    - nginx
    - configuration

# Setup sites for each of the DevOps tools
- name: Setup Rancher proxy configuration
  template:
    src: rancher.conf.j2
    dest: /etc/nginx/conf.d/rancher.conf
    owner: "{{ nginx_user }}"
    group: "{{ nginx_group }}"
    mode: '0644'
  when: "'rancher_servers' in groups"
  notify: reload nginx
  tags:
    - nginx
    - rancher

- name: Setup Keycloak proxy configuration
  template:
    src: keycloak.conf.j2
    dest: /etc/nginx/conf.d/keycloak.conf
    owner: "{{ nginx_user }}"
    group: "{{ nginx_group }}"
    mode: '0644'
  when: "'keycloak_servers' in groups"
  notify: reload nginx
  tags:
    - nginx
    - keycloak

- name: Setup Nexus proxy configuration
  template:
    src: nexus.conf.j2
    dest: /etc/nginx/conf.d/nexus.conf
    owner: "{{ nginx_user }}"
    group: "{{ nginx_group }}"
    mode: '0644'
  when: "'nexus_servers' in groups"
  notify: reload nginx
  tags:
    - nginx
    - nexus

# SSL certificate setup
- name: Check for SSL certificate
  stat:
    path: "/etc/nginx/ssl/{{ nginx_domain }}.crt"
  register: ssl_cert
  tags:
    - nginx
    - ssl

- name: Set up self-signed SSL certificates
  shell: |
    openssl req -x509 -nodes -days 3650 \
    -newkey rsa:4096 \
    -keyout /etc/nginx/ssl/{{ nginx_domain }}.key \
    -out /etc/nginx/ssl/{{ nginx_domain }}.crt \
    -subj "/C=US/ST=State/L=City/O=Organization/CN={{ nginx_domain }}"
  args:
    creates: /etc/nginx/ssl/{{ nginx_domain }}.crt
  when: nginx_ssl_enabled | bool and not ssl_cert.stat.exists and nginx_ssl_self_signed | bool
  notify: reload nginx
  tags:
    - nginx
    - ssl

- name: Enable and start Nginx
  systemd:
    name: nginx
    state: started
    enabled: true
  tags:
    - nginx

- name: Install Python requests module for service checking
  pip:
    name: requests
    state: present
  tags:
    - nginx
    - dashboard
    - status

- name: Copy service status checker script
  copy:
    src: check_services.py
    dest: /usr/local/bin/check_services.py
    mode: '0755'
  tags:
    - nginx
    - dashboard
    - status

- name: Create cron job to check services status
  cron:
    name: "Check DevOps services status"
    minute: "*/5"
    job: "/usr/local/bin/check_services.py --services '{{ service_urls | to_json }}' --output /var/www/html/assets/status.json"
    user: "{{ nginx_user }}"
  tags:
    - nginx
    - dashboard
    - status
